<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ぼっち</title>
  
  
  <link href="https://inglingq.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://inglingq.gitee.io/"/>
  <updated>2024-02-18T02:07:36.081Z</updated>
  <id>https://inglingq.gitee.io/</id>
  
  <author>
    <name>希</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-反射</title>
    <link href="https://inglingq.gitee.io/2024/02/18/java%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/"/>
    <id>https://inglingq.gitee.io/2024/02/18/java%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</id>
    <published>2024-02-18T02:06:37.000Z</published>
    <updated>2024-02-18T02:07:36.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p><img src="https://pic.imgdb.cn/item/65d163cf9f345e8d0384ded5.png"></p><p>如何创建代理：</p><p>1.先定义一个对象</p><p>2.定义一个接口用于把所有想要被代理的方法定义在接口上，并让对象继承此接口</p><p>3.创建代理：类似Spring中的<code>AOP</code>思想，面向切面编程，在不改动原有代码的基础上，增加功能</p><p>代码举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="comment">//可以把所有想要被代理的方法定义在接口上</span></span><br><span class="line">    <span class="comment">//接口默认就是public abstract</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//唱歌</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">abstract</span> String <span class="title function_">sing</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳舞</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStar</span> <span class="keyword">implements</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//唱歌</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在唱&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;谢谢&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳舞</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BigStar&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 方法作用：</span></span><br><span class="line"><span class="comment">     *      给一个明星的对象，创建一个代理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  返回值：</span></span><br><span class="line"><span class="comment">     *      给明星创建的代理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  需求：</span></span><br><span class="line"><span class="comment">     *      1.外面的人想要明星唱首歌</span></span><br><span class="line"><span class="comment">     *          代理对象 = ProxyUtil.createProxy(大明星对象);</span></span><br><span class="line"><span class="comment">     *      2.在调用代理的唱歌方法</span></span><br><span class="line"><span class="comment">     *        代理对象，唱歌的方法(&quot;太美了&quot;)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title function_">createProxy</span><span class="params">(BigStar bigStar)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Star</span> <span class="variable">star</span> <span class="operator">=</span> (Star) Proxy.newProxyInstance(</span><br><span class="line">                ProxyUtil.class.getClassLoader(), <span class="comment">//参数一，用于指定用哪个类记载器，去加载生成的代理类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Star.class&#125;,   <span class="comment">//参数二：指定接口，这些接口用于指定生成的代理长什么，也就是有哪些方法</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//参数三：用于指定生成的代理对象要干什么事情</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 参数一：代理的对象</span></span><br><span class="line"><span class="comment">                         * 参数二：要运行的方法，sing</span></span><br><span class="line"><span class="comment">                         * 参数三：调用sing方法，传递的实参</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;sing&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备话筒&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;dance&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;为&quot;</span>+bigStar.getName()+<span class="string">&quot;准备场地中&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//之后去找大明星唱歌或跳舞</span></span><br><span class="line">                        <span class="comment">//代码表现形式，调用大明星里面的唱歌或者跳舞等方法</span></span><br><span class="line">                        <span class="keyword">return</span> method.invoke(bigStar,args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反射-构造"><a href="#反射-构造" class="headerlink" title="反射-构造"></a>反射-构造</h4><p>利用反射获取构造方法</p><p>Class类中用于获取构造方法的方法</p><p>Constructor&lt;?&gt;[] getConstructors()：返回所有公共构造方法对象的数组</p><p>Constructor&lt;?&gt;[] getDeclaredConstructors()：返回所有构造方法对象的数组</p><p>Constructor<T>getConstructor(CIass&lt;?&gt;…parameterTypes)：返回单个公共构造方法对象</p><p>Constructor<T>getDecIaredConstructors(CIass&lt;?&gt;…parameterTypes)：返回单个构造方法对象</p><p>Construct 类中用于创建对象的方法</p><p>T newlnstance(0bject…init args)：根据指定的构造方法创建对象</p><p>setAccessible(boolean flag)：设置为true，表示取消访问检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> flect02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class字节码文件</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;flect02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取所有构造方法(不区分权限修饰符)</span></span><br><span class="line">        <span class="comment">/*Constructor[] constructors = clazz.getDeclaredConstructors();</span></span><br><span class="line"><span class="comment">        for (Constructor constructor: constructors) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(constructor);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取无参构造</span></span><br><span class="line">        <span class="comment">/*Constructor&lt;?&gt; con1 = clazz.getDeclaredConstructor();</span></span><br><span class="line"><span class="comment">        System.out.println(con1);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取有参构造</span></span><br><span class="line">        <span class="comment">/*Constructor&lt;?&gt; con2 = clazz.getDeclaredConstructor(String.class);</span></span><br><span class="line"><span class="comment">        System.out.println(con2);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Constructor&lt;?&gt; con4 = clazz.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> con4.getModifiers();  <span class="comment">//返回的是常量计算值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造方法参数获取</span></span><br><span class="line">        <span class="comment">/*Parameter[] parameters = con4.getParameters();</span></span><br><span class="line"><span class="comment">        for (Parameter parameter : parameters )&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(parameter);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//暴力反射：临时取消权限校验</span></span><br><span class="line">        con4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) con4.newInstance(<span class="string">&quot;小黄&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反射-成员变量"><a href="#反射-成员变量" class="headerlink" title="反射-成员变量"></a>反射-成员变量</h4><p>  利用反射获取成员变量</p><p> Class类中用于获取成员变量的方法 </p><p>Field[] getFields()：返回所有公共成员变量对象的数组 </p><p>Field[] getDeclaredFields()：返回所有成员变量对象的数组 </p><p>Field[] getField(String name)：返回单个公共成员变量对象 </p><p>Fieid getDecIaredFieId(String name)：返回单个成员变量对象</p><p> Field类中用于创建对象的方法 voidset(Object Obj,Object value)：赋值</p><p> Object get(Object obj)获取值 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//1.获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;flect03.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取所有对象的成员变量</span></span><br><span class="line">        <span class="comment">// Field[] fields = clazz.getDeclaredFields();</span></span><br><span class="line">        <span class="comment">// for(Field field : fields)&#123;</span></span><br><span class="line">        <span class="comment">//     System.out.println(field);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取单个的成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>); <span class="comment">//可获得所有方法</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">gender</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;gender&quot;</span>); <span class="comment">//此方法私有属性无法获取</span></span><br><span class="line">        System.out.println(gender);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取权限修饰符    Modifiers:修饰语  Field：字段 Declared：声明，宣告</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> name.getModifiers();</span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量的名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> name.getName();</span><br><span class="line">        System.out.println(n);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量的数据类型</span></span><br><span class="line">        Class&lt;?&gt; type = name.getType();</span><br><span class="line">        System.out.println(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量记录的值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小黄&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>); <span class="comment">//临时取消访问权限</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> name.get(s);  <span class="comment">//私有的无法直接获取，需采用暴力反射</span></span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改对象里面记录的值</span></span><br><span class="line">        name.set(s,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        age.set(s,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反射-变量方法"><a href="#反射-变量方法" class="headerlink" title="反射-变量方法"></a>反射-变量方法</h4><p>利用反射获取成员方法 Class类中用于获取成员方法的方法<br>Method[]getMethods()：返回所有公共成员方法对象的数组，包括继承的<br>Method[] getDeclaredMethods()：返回所有成员方法对象的数组，不包括继承的<br>MethodgetMethod(String name,Class<?>...parameterTypes)：返回单个公共成员方法对象 MethodgetDecIaredMethod(Stringname,Class<?>…parameterTypes)：返回单个成员方法对象 </p><p>Method类中用于创建对象的方法<br>Object invoke(ObjectObj,Object…args)：运行方法<br>参数一：用obj对象调用该方法<br>参数二：调用方法的传递的参数（如果没有就不写）<br>返回值：方法的返回值（如果没有就不写） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;flect04.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取里面的所有的方法对象(包含父类中所有的公共方法)</span></span><br><span class="line">        <span class="comment">/*Method[] methods = clazz.getMethods();</span></span><br><span class="line"><span class="comment">        for (Method method : methods)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(method);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取里面的所有方法对象(不能获取父类的，但是可以获取本类中的共有的以及私有的)</span></span><br><span class="line">        <span class="comment">/*Method[] methods = clazz.getDeclaredMethods();</span></span><br><span class="line"><span class="comment">        for (Method method : methods)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(method);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定单一方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">        System.out.println(m);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法的修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> m.getModifiers();</span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法的名字</span></span><br><span class="line">        System.out.println(m.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法的形参</span></span><br><span class="line">        Parameter[] parameters = m.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter :parameters)&#123;</span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法抛出的异常</span></span><br><span class="line">        Class[] exceptionTypes = m.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span> (Class exceptionType : exceptionTypes)&#123;</span><br><span class="line">            System.out.println(exceptionType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法运行</span></span><br><span class="line">        <span class="comment">/* Method类中用于创建对象的方法</span></span><br><span class="line"><span class="comment">           Object invoke(Object obj,Object... arges): 运行方法</span></span><br><span class="line"><span class="comment">           参数一： 用于Obj调用该方法</span></span><br><span class="line"><span class="comment">           参数二：调用方法的传递的参数(如果没有就不写)</span></span><br><span class="line"><span class="comment">           返回值：方法的返回值(如果没有就不写)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String)m.invoke(s, <span class="string">&quot;鲍鱼&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">代理，反射</summary>
    
    
    
    <category term="Java基础" scheme="https://inglingq.gitee.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Butterfly美化(双列)</title>
    <link href="https://inglingq.gitee.io/2024/02/05/butterfly%E7%BE%8E%E5%8C%96/Butterfly%20%E7%BE%8E%E5%8C%96/"/>
    <id>https://inglingq.gitee.io/2024/02/05/butterfly%E7%BE%8E%E5%8C%96/Butterfly%20%E7%BE%8E%E5%8C%96/</id>
    <published>2024-02-05T04:08:02.000Z</published>
    <updated>2024-02-05T04:19:05.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双列布局美化"><a href="#双列布局美化" class="headerlink" title="双列布局美化"></a>双列布局美化</h3><p>双列布局插件优先级较高，采用引入<code>css</code>嵌入覆盖时，必须关闭插件（网站根目录<code>_config</code>g配置项的双列布局插件 (不是主题的)）后才能覆盖,此外为实现模糊效果文章文字区域 <code>rencent-post-info，</code>引入了<code>index01.css</code>文件.</p><p>根据此博主 <a href="https://ichika.cc/Article/beautiful_MyBeautiful/">https://ichika.cc/Article/beautiful_MyBeautiful/</a> 的方式直接复制pug源码发现，鼠标悬停时在文章时，文章图片模糊效果消失了，最后通过在原来源码的基础上，引用博主的 <code>.post-info-hover(title=title)</code>  修改成功</p><p>路径：<code>layout\includes\mixins\post-ui.pug</code>  </p><p>源码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">mixin postUI(posts)</span><br><span class="line">  each article , index in page.posts.data</span><br><span class="line">    .recent-post-item</span><br><span class="line">      -</span><br><span class="line">        let link = article.link || article.path</span><br><span class="line">        let title = article.title || _p(&#x27;no_title&#x27;)</span><br><span class="line">        const position = theme.cover.position</span><br><span class="line">        let leftOrRight = position === &#x27;both&#x27;</span><br><span class="line">          ? index%2 == 0 ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">          : position === &#x27;left&#x27; ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">        let post_cover = article.cover</span><br><span class="line">        let no_cover = article.cover === false || !theme.cover.index_enable ? &#x27;no-cover&#x27; : &#x27;&#x27;</span><br><span class="line">      -</span><br><span class="line">      //-添加的代码</span><br><span class="line">      .post-info-hover(title=title)</span><br><span class="line">        a.post-article-a(href=url_for(link) title=title)</span><br><span class="line">        .post-category</span><br><span class="line">          each item, index in article.categories.data</span><br><span class="line">            a(href=url_for(item.path)).article-meta__categories #[=item.name]</span><br><span class="line">            if (index &lt; article.categories.data.length - 1)</span><br><span class="line">              i.fas.fa-angle-right.article-meta-link</span><br><span class="line">        .post-tag</span><br><span class="line">          each item, index in article.tags.data</span><br><span class="line">            a(href=url_for(item.path)).article-meta__tags #[=item.name]</span><br><span class="line">            if (index &lt; article.tags.data.length - 1)</span><br><span class="line">              span.article-meta-link #[=&#x27; &#x27;]</span><br><span class="line">        a.article-title(href=url_for(link) title=title)= title</span><br><span class="line">                //- Display the article introduction on homepage         封面文章双列排列</span><br><span class="line">        case theme.index_post_content.method</span><br><span class="line">          when false</span><br><span class="line">            - break</span><br><span class="line">          when 1</span><br><span class="line">            .content!= article.description</span><br><span class="line">          when 2</span><br><span class="line">            if article.description</span><br><span class="line">              .content!= article.description</span><br><span class="line">            else</span><br><span class="line">              - const content = strip_html(article.content)</span><br><span class="line">              - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">              - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">              .content!= expert</span><br><span class="line">          default</span><br><span class="line">            - const content = strip_html(article.content)</span><br><span class="line">            - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">            - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">            .content!= expert</span><br><span class="line">        .article-meta-wrap</span><br><span class="line">          if (is_home() &amp;&amp; (article.top || article.sticky &gt; 0))</span><br><span class="line">            span.article-meta</span><br><span class="line">              i.fas.fa-thumbtack.sticky</span><br><span class="line">              span.sticky= _p(&#x27;sticky&#x27;)</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">          if (theme.post_meta.page.date_type)</span><br><span class="line">            span.post-meta-date</span><br><span class="line">              if (theme.post_meta.page.date_type === &#x27;both&#x27;)</span><br><span class="line">                i.far.fa-calendar-alt</span><br><span class="line">                span.article-meta-label=_p(&#x27;post.created&#x27;)</span><br><span class="line">                time.post-meta-date-created(datetime=date_xml(article.date) title=_p(&#x27;post.created&#x27;) + &#x27; &#x27; + full_date(article.date))=date(article.date, config.date_format)</span><br><span class="line">                span.article-meta-separator |</span><br><span class="line">                i.fas.fa-history</span><br><span class="line">                span.article-meta-label=_p(&#x27;post.updated&#x27;)</span><br><span class="line">                time.post-meta-date-updated(datetime=date_xml(article.updated) title=_p(&#x27;post.updated&#x27;) + &#x27; &#x27; + full_date(article.updated))=date(article.updated, config.date_format)</span><br><span class="line">              else</span><br><span class="line">                - let data_type_updated = theme.post_meta.page.date_type === &#x27;updated&#x27;</span><br><span class="line">                - let date_type = data_type_updated ? &#x27;updated&#x27; : &#x27;date&#x27;</span><br><span class="line">                - let date_icon = data_type_updated ? &#x27;fas fa-history&#x27; :&#x27;far fa-calendar-alt&#x27;</span><br><span class="line">                - let date_title = data_type_updated ? _p(&#x27;post.updated&#x27;) : _p(&#x27;post.created&#x27;)</span><br><span class="line">                i(class=date_icon)</span><br><span class="line">                span.article-meta-label=date_title</span><br><span class="line">                time(datetime=date_xml(article[date_type]) title=date_title + &#x27; &#x27; + full_date(article[date_type]))=date(article[date_type], config.date_format)</span><br><span class="line">          </span><br><span class="line">          mixin countBlockInIndex</span><br><span class="line">            - needLoadCountJs = true</span><br><span class="line">            span.article-meta</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">              i.fas.fa-comments</span><br><span class="line">              if block</span><br><span class="line">                block</span><br><span class="line">              span.article-meta-label= &#x27; &#x27; + _p(&#x27;card_post_count&#x27;)</span><br><span class="line">          </span><br><span class="line">          if theme.comments.card_post_count</span><br><span class="line">            case theme.comments.use[0]</span><br><span class="line">              when &#x27;Disqus&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=full_url_for(link) + &#x27;#disqus_thread&#x27;)</span><br><span class="line">                    i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">              when &#x27;Disqusjs&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=full_url_for(link) + &#x27;#disqusjs&#x27;)</span><br><span class="line">                    span.disqus-comment-count(data-disqus-url=full_url_for(link))</span><br><span class="line">                      i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">              when &#x27;Valine&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    span.valine-comment-count(data-xid=url_for(link))</span><br><span class="line">                      i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">              when &#x27;Waline&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    span.waline-comment-count(id=url_for(link))</span><br><span class="line">                      i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">              when &#x27;Twikoo&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a.twikoo-count(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">              when &#x27;Facebook Comments&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    span.fb-comments-count(data-href=urlNoIndex(article.permalink))</span><br><span class="line">              when &#x27;Remark42&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    span.remark42__counter(data-url=urlNoIndex(article.permalink))</span><br><span class="line">                      i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">              when &#x27;Artalk&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    span.artalk-count(data-page-key=url_for(link))</span><br><span class="line">                      i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">//-分割线-----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if post_cover &amp;&amp; theme.cover.index_enable</span><br><span class="line">        .post_cover(class=leftOrRight)</span><br><span class="line">          a(href=url_for(link) title=title)</span><br><span class="line">            if article.cover_type === &#x27;img&#x27;</span><br><span class="line">              img.post-bg(src=url_for(post_cover) onerror=`this.onerror=null;this.src=&#x27;$&#123;url_for(theme.error_img.post_page)&#125;&#x27;` alt=title)</span><br><span class="line">            else</span><br><span class="line">              div.post-bg(style=`background: $&#123;post_cover&#125;`)</span><br><span class="line">              </span><br><span class="line">      .recent-post-info(class=no_cover)</span><br><span class="line">        a.article-title(href=url_for(link) title=title)</span><br><span class="line">          if (is_home() &amp;&amp; (article.top || article.sticky &gt; 0))</span><br><span class="line">            i.fas.fa-thumbtack.sticky</span><br><span class="line">          = title</span><br><span class="line">        .article-meta-wrap</span><br><span class="line">          if (theme.post_meta.page.date_type)</span><br><span class="line">            span.post-meta-date</span><br><span class="line">              if (theme.post_meta.page.date_type === &#x27;both&#x27;)</span><br><span class="line">                i.far.fa-calendar-alt</span><br><span class="line">                span.article-meta-label=_p(&#x27;post.created&#x27;)</span><br><span class="line">                time.post-meta-date-created(datetime=date_xml(article.date) title=_p(&#x27;post.created&#x27;) + &#x27; &#x27; + full_date(article.date))=date(article.date, config.date_format)</span><br><span class="line">                span.article-meta-separator |</span><br><span class="line">                i.fas.fa-history</span><br><span class="line">                span.article-meta-label=_p(&#x27;post.updated&#x27;)</span><br><span class="line">                time.post-meta-date-updated(datetime=date_xml(article.updated) title=_p(&#x27;post.updated&#x27;) + &#x27; &#x27; + full_date(article.updated))=date(article.updated, config.date_format)</span><br><span class="line">              else</span><br><span class="line">                - let data_type_updated = theme.post_meta.page.date_type === &#x27;updated&#x27;</span><br><span class="line">                - let date_type = data_type_updated ? &#x27;updated&#x27; : &#x27;date&#x27;</span><br><span class="line">                - let date_icon = data_type_updated ? &#x27;fas fa-history&#x27; :&#x27;far fa-calendar-alt&#x27;</span><br><span class="line">                - let date_title = data_type_updated ? _p(&#x27;post.updated&#x27;) : _p(&#x27;post.created&#x27;)</span><br><span class="line">                i(class=date_icon)</span><br><span class="line">                span.article-meta-label=date_title</span><br><span class="line">                time(datetime=date_xml(article[date_type]) title=date_title + &#x27; &#x27; + full_date(article[date_type]))=date(article[date_type], config.date_format)</span><br><span class="line">          if (theme.post_meta.page.categories &amp;&amp; article.categories.data.length &gt; 0)</span><br><span class="line">            span.article-meta</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">              i.fas.fa-inbox</span><br><span class="line">              each item, index in article.categories.data</span><br><span class="line">                a(href=url_for(item.path)).article-meta__categories #[=item.name]</span><br><span class="line">                if (index &lt; article.categories.data.length - 1)</span><br><span class="line">                  i.fas.fa-angle-right.article-meta-link</span><br><span class="line">          if (theme.post_meta.page.tags &amp;&amp; article.tags.data.length &gt; 0)</span><br><span class="line">            span.article-meta.tags</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">              i.fas.fa-tag</span><br><span class="line">              each item, index in article.tags.data</span><br><span class="line">                a(href=url_for(item.path)).article-meta__tags #[=item.name]</span><br><span class="line">                if (index &lt; article.tags.data.length - 1)</span><br><span class="line">                  span.article-meta-link #[=&#x27;•&#x27;]</span><br><span class="line">     </span><br><span class="line">    if theme.ad &amp;&amp; theme.ad.index</span><br><span class="line">      if (index + 1) % 3 == 0</span><br><span class="line">        .recent-post-item.ads-wrap!=theme.ad.index</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对双列布局的美化</summary>
    
    
    
    <category term="Butterfly美化" scheme="https://inglingq.gitee.io/categories/Butterfly%E7%BE%8E%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>如何优雅地使用Chatgpt</title>
    <link href="https://inglingq.gitee.io/2024/01/16/AI/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Chatgpt/"/>
    <id>https://inglingq.gitee.io/2024/01/16/AI/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Chatgpt/</id>
    <published>2024-01-16T04:18:10.000Z</published>
    <updated>2024-01-16T09:53:05.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何优雅地使用Chatgpt"><a href="#如何优雅地使用Chatgpt" class="headerlink" title="如何优雅地使用Chatgpt"></a>如何优雅地使用Chatgpt</h3><p>Chatgpt 强不强大在于你会不会问，问的好则是人工智能问不好则是人工智障 </p><p>本文根据b站大陈聊AI博主的教程，进行了实机验证并总结了使用方法</p><h4 id="1-利用AI优化问题"><a href="#1-利用AI优化问题" class="headerlink" title="1.利用AI优化问题"></a>1.利用AI优化问题</h4><p>主要用于规划：例如学习计划等</p><p><strong>法一：</strong></p><p>背景  + 指令词 + 输入 + 输出要求</p><ul><li>举例说明：</li></ul><p> 我是一名二十岁的亚洲男性，素食者，希望在二十天内增重20斤，给我运动方案 饮食计划 睡眠建议，以天为单位，以表格形式展现</p><ul><li>例句分析</li></ul><table><thead><tr><th>背景</th><th>我是一名二十岁的亚洲男性，素食者</th></tr></thead><tbody><tr><td>指令词</td><td>希望在二十天内增重20斤</td></tr><tr><td>输入</td><td>给我运动方案 饮食计划 睡眠建议</td></tr><tr><td>输出要求</td><td>以天为单位，以表格形式展现</td></tr></tbody></table><p><strong>法二（进阶使用）：</strong></p><p>为你<strong>寻找最佳prompt</strong></p><p>采用prompt公式：</p><p> 指令词 + 背景 + 输入 + 输出要求</p><ul><li><p>运用此公式描述出prompt风格的问题，能让chatGpt更好的解决你的问题</p></li><li><p>有时候我们并不是一个好的提问者，但我们可以采用一种方式让ChatGpt迭代你提出的问题，进而产生优质的问题，再利用ChatGpt迭代出的问题反问ChatGpt 即可得到一个全面的结果（优化问题，并回答问题 这才是Ai）</p></li><li><p>以下为使用方式模板，直接粘贴复制即可:</p><p>ChatGPT 超级 Prompt</p><p>我想让你成为我的Prompt创作者。你的目标是帮助我创建最佳的Prompt，这个Prompt 将由你ChatGPT 使用。你将遵循以下过程：<br>1.首先，你会问我Prompt是关于什么的。我会告诉你，但我们需要通过不断的重复来改进它，通过则进行下一步。<br>2.根据我的输入，你会创建三个部分:<br>a）修订后的Prompt（你编写修订后的Prompt，应该清晰、精确、易于理解）<br>b）建议（你提出建议，哪些细节应该包含在Prompt中，以使其更好)<br>c）问题（你提出相关问题，询问我需要哪些额外信息来改进Prompt)<br>3.你提供的Prompt应该采用我发出请求的形式，由ChatGPT执行。</p><p>4.我们将继续这个迭代过程，我会提供更多信息，你会更新“修订后的Prompt”部分的请求，直到它完整为止</p></li></ul><p><strong>法三（与法二plus版）：</strong></p><p><strong>利用prompt寻找最佳解决方案</strong></p><ul><li><p>模板：</p><p>你需要应用<strong>连续问题解决系统</strong>（CPSS）来通过不断重复寻找我的问题，并通过深度解析后提供解决方案。<br>CPSS的工作原理如下：<br>1.你将采用六个步骤的问题解决过程来评估我的初始问题：1）确定问题2）定义目标3）生成解决方案（最多3个）4)评估并选择解决方案5）实施解决方案6）下一个问题<br>2.在“生成解决方案”的步骤中，应列出最多3个解决方案；在“评估和选择解决方案”的步骤中，应提供精确和具体的解决方案。在“实施解决方案”的步骤中，应提供所选解决方案付诸实施的具体方法。<br>3.”下一个问题”部分应包含你可以向我提出的最重要的问题，以获取进一步的信息，这些信息对于问题解决过程的继续非常重要。每个问题的数量最多为3个。<br>4.你的回答应该简洁明了，使用Markdown格式撰写，其中每个步骤的名称以粗体显示，并且所有文字包括标签的字体大小应具有一致性。<br>5.在你回答了我的第一个问题之后，CPSS过程的下一个迭代开始。<br>6.系统将整合我的最后一个回答，并通过每个迭代逐渐提供更加深入的回答，你可以通过向我提出新的问题来引导它。<br>你的第一个回答应该只是一个问候，提醒对方你是一个连续问题解决系统（CPSS）。不要在第一个回答中开始CPSS运程，你的第一个回答只包括问候和要求提出的要解决的问题。之后，我会为你提供信息，请在你的下一个回答中开始CPSS过程。</p></li></ul><p><strong>等ai问答完毕后，即可要求它进行总结</strong></p><h4 id="2-多角度AI"><a href="#2-多角度AI" class="headerlink" title="2.多角度AI"></a>2.多角度AI</h4><p>可用于方案文档设计</p><p>我们可以让chatgpt<strong>模拟成几个人互相探讨</strong>，以进行多角度方面分析，让ai迭代出更好的结果</p><p>举例说明：</p><p>今日主题：“2030年未来城市概念汽车设计研讨”<br>设计团队由以下三个角色组成：<br>概念设计师：负责提供汽车的核心设计概念和方向。<br>视觉工程师：负责基于概念设计的具体可视化，使用Dall-E3创建汽车的初步设计图功能策略师：专注于汽车的功能性和适应未来城市的特性，提供反馈以优化设计。研讨流程如下:<br>[概念设计师]提出一个针对2030年未来城市的核心汽车设计概念。<br>[视觉工程师】基于该概念进行具体的视觉化设计，每轮讨论使用Dall-E3生成出汽车设计图<br>[功能策略师]根据未来城市的特性评估汽车的功能性，并提供优化建议。<br>三者共同讨论，并对汽车设计进行迭代优化。每人发言时，需先列出角色身份，例如[概念设计师]以上讨论步骤，至少重复5轮，全部由ChatGPT自我沟通讨论完成，无需人工介入，中途不需要询问我的建议，直至达到一个既美观又实用的概念设计</p><h4 id="3-六大经典prompt"><a href="#3-六大经典prompt" class="headerlink" title="3.六大经典prompt"></a>3.六大经典prompt</h4><p>可用日常问题的解决</p><p><strong>1.多角度（Multiple Angles)</strong></p><p>公式：请用多个角度来思考[主题内容]。（从[角度1]、[角度2]、[角度3]…多个角度来思考)<br>示例：</p><ul><li>请用多个角度来分析这家公司的商业报告。（从市场趋势、竞对分析、战略规划、财务状况和市场前景等多个角度来思考)</li><li>请用多个角度来分析人工智能行业。（从就业市场、教育、社会结构等多个角度来思考)</li><li>请用多个角度来思考良好睡眠的重要性。（从免疫系统、皮肤健康、心理健康等多个角度来思考)</li></ul><p><strong>2.总结（Summarize)</strong></p><p>公式：基于[主题内容]中的主要观点，请给出[格式]。<br>示例:</p><ul><li>基于《被讨厌的勇气》这本书，请给出300字的简要梗概</li><li>基于这篇新闻报道，请给出5个要点</li><li>基于《健康饮食习惯》这篇文章，请总结出7条建议</li></ul><p><strong>3.个性（Personality)</strong></p><p>公式：请以[参考对象或风格]的方式，为我撰写「话题」内容。<br>示例:</p><ul><li>请以幽默的方式，为我写一篇观后感</li><li>请以张爱玲的风格，为我撰写一篇关于爱情的博文</li><li>请以李白的风格，为我写一首豪放不羁的诗歌</li></ul><p><strong>4.示例询问（Example Inquiry</strong>)</p><p>公式：请按照以下格式，给出[主题内容]的信息。[示例格式]<br>示例：<br>请按以下格式为我列出《三国演义》、《红楼梦》，《西游记》的信息<br>【作品名称】水浒传<br>【作者】施耐庵、罗贯中<br>【创作年代】元末明初<br>【文学体裁】章回体小说<br>【字数】1040000（一百回本）</p><p><strong>5.能力与角色（Capacity and Role)</strong><br>公式：你是具有[主题]专业知识的[角色]。请提供关于[主题]的[格式]。<br>示例：</p><ul><li>你是具有商业建筑设计专业知识的建筑师，请提供关于商业建筑规划和设计的应用，如商场、办公楼和酒店等的设计与布局。</li><li>你是一位专注于健康饮食的营养师，请提供一份适合亚洲青年人的关于平衡膳食计划的信息表</li><li>你是一位创业投资方面的理财顾问，请提供一份关于企业融资、创业投资战略方面的学习教程</li></ul><p><strong>6.分隔符（Separator)</strong><br>三重引号括起来的内容，‘’‘ ’‘<br>用<article>标记分隔的内容，[需求指示]<br>示例:<br>①三重引号</p><p>‘’‘ 内容部分…. ’‘’</p><p>②XML标签<article></article></p><article>内容部分...</article>]]></content>
    
    
    <summary type="html">人工智能？人工智障 ？</summary>
    
    
    
    <category term="AI" scheme="https://inglingq.gitee.io/categories/AI/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://inglingq.gitee.io/2023/12/26/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://inglingq.gitee.io/2023/12/26/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-12-26T13:52:11.000Z</published>
    <updated>2023-12-26T13:55:18.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>单例模式：确保一个类只有一个实例，</strong>而且自行实例化并向整个系统提供这个实例</p><ul><li>确保一个类只有一个实例，则说明类中的构造方法不能是public公开的，既不能被其他类实例化，说明此构造方法只能被private修饰，并且拥有一个当前类的静态成员变量</li><li>只有一个实例(其他的类共享此一个实例)</li><li>需要一个静态方法用于向外界提供当前类的实例</li></ul><p>主要用于：</p><ul><li>序列生成器，Web页面的计数器等</li><li>如果创建某个对象需要消耗过多资源 ，例如访问IO，数据库资源等，采用单例模式可以减少资源消耗</li></ul><h4 id="实现时机"><a href="#实现时机" class="headerlink" title="实现时机"></a>实现时机</h4><h5 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h5><p>即这个唯一实例，在类加载的时候立刻进行实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  <span class="comment">//饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h5><p>即类加载的时候不进行实例化，在第一次使用的时候在进行实例化</p><p>为了防止进程同时进行需要加锁处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized 加锁处理</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span>  <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>双重检查锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>   <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">                        singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在定义singleton过程中应该要加 volatile 修饰，singleton = new Singleton() 可以拆解为3步：</span></span><br><span class="line"><span class="comment">         * 1、分配内存，</span></span><br><span class="line"><span class="comment">         * 2、初始化对象，3</span></span><br><span class="line"><span class="comment">         * 、指向刚分配的地址，</span></span><br><span class="line"><span class="comment">         * 若发生重排序，假设 A 线程执行了1和3，还没有执行2，B线程来到判断 NULL，B线程就会直接返回还没初始化的instance了。volatile 可以避免重排序。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">设计模式之单例模式</summary>
    
    
    
    <category term="Java设计模式" scheme="https://inglingq.gitee.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>static关键字</title>
    <link href="https://inglingq.gitee.io/2023/12/22/java%E5%9F%BA%E7%A1%80/static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://inglingq.gitee.io/2023/12/22/java%E5%9F%BA%E7%A1%80/static%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2023-12-22T13:14:10.000Z</published>
    <updated>2024-02-18T02:17:02.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h4 id="1-static成员内存机制"><a href="#1-static成员内存机制" class="headerlink" title="1.static成员内存机制"></a>1.static成员内存机制</h4><p><img src="/img/static%E6%9C%BA%E5%88%B6.png"> </p><h4 id="2-static成员变量"><a href="#2-static成员变量" class="headerlink" title="2.static成员变量"></a>2.static成员变量</h4><p>图示可知，static修饰的成员变量为共享变量，图中door类实例化出的所有变量都共享一个被static修饰的变量</p><h4 id="3-static成员方法"><a href="#3-static成员方法" class="headerlink" title="3.static成员方法"></a>3.static成员方法</h4><p>static修饰的所有方法为静态方法。从属于类，调用此方法可以直接被调用例如  <strong>类名.方法名()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Door.open();</span><br></pre></td></tr></table></figure><p>而非静态方法需要将类实例化成对象后进行调用.例如 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Door</span> <span class="variable">door</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Door</span>();</span><br><span class="line">door.open();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>static修饰方法需要注意</p><ul><li>静态方法中不能出现this关键字，非静态方法可以使用this关键字</li><li>静态方法不能访问非静态的成员(非静态的成员变量，方法)</li></ul><h4 id="4-静态代码块"><a href="#4-静态代码块" class="headerlink" title="4.静态代码块"></a>4.静态代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类具有static代码块，则此代码块会最优先执行</p><ul><li>静态代码在类加载的时候会执行，<strong>且只执行一次</strong></li><li>你的代码只需执行一次时可以使用，例如注册驱动</li></ul><h4 id="5-适用场景"><a href="#5-适用场景" class="headerlink" title="5.适用场景"></a>5.适用场景</h4><p>常用于工具类的创建</p>]]></content>
    
    
    <summary type="html">static属性</summary>
    
    
    
    <category term="Java基础" scheme="https://inglingq.gitee.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Andriod基础笔记</title>
    <link href="https://inglingq.gitee.io/2023/12/03/Android/%E7%AC%94%E8%AE%B0/"/>
    <id>https://inglingq.gitee.io/2023/12/03/Android/%E7%AC%94%E8%AE%B0/</id>
    <published>2023-12-03T03:14:10.000Z</published>
    <updated>2023-12-03T02:56:46.097Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-文本设置"><a href="#1-文本设置" class="headerlink" title="1.文本设置"></a>1.文本设置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码示例 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--sp主要用于文字字体大小，可随手机系统变化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_hello2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@string/hello&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;#b0b0b0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>1.字体设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.设置字体大小，默认单位为sp</span></span><br><span class="line">tv_hello.setTextSize(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>在XML中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sp主要用于文字字体大小，可随手机系统变化 --&gt;</span></span><br><span class="line">android:textSize=&quot;30sp&quot;</span><br></pre></td></tr></table></figure><p>2.文本颜色设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.设置文本颜色,采用六位二进制时，默认字体不透明0xffb0b0b0</span></span><br><span class="line">tv_hello.setTextColor(<span class="number">0xffb0b0b0</span>);</span><br></pre></td></tr></table></figure><p>在XML中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:textColor=&quot;#b0b0b0&quot;</span><br></pre></td></tr></table></figure><p>3.文本背景设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.设置文本背景颜色</span></span><br><span class="line">tv_background.setBackgroundColor(GREEN);</span><br></pre></td></tr></table></figure><p>在XML中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:background</span>=<span class="string">@color/black;/</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.文本修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> findViewById(R.id.tv_hello);</span><br><span class="line"><span class="comment">//设置文本修改</span></span><br><span class="line"><span class="comment">//textView.setText(&quot;修改一下&quot;);</span></span><br><span class="line"><span class="comment">//也可以通过引用全局设置值进行修改</span></span><br><span class="line">textView.setText(R.string.hello);  <span class="comment">//此hello全局属性放在values文件目录下的colors.xml中</span></span><br></pre></td></tr></table></figure><h3 id="2-视图布局"><a href="#2-视图布局" class="headerlink" title="2.视图布局"></a>2.视图布局</h3><h4 id="2-1内外边距"><a href="#2-1内外边距" class="headerlink" title="2.1内外边距"></a>2.1内外边距</h4><p>1.外边距(结合前端的margin 内和padding 外)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:layout_marginTop=&quot;15dp&quot;</span><br></pre></td></tr></table></figure><p>2.设置视图的宽高</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>match_parent: 表示与上级视图保持一致</p></li><li><p>wrap_content: 表示与视图中的内容自适应</p></li><li><p>以DP为单位的具体尺寸</p></li></ul><p>通过代码设置视图宽高的步骤</p><ul><li><p>调用控件对象的<code>getLayoutParams</code>方法，获取控件参数</p></li><li><p>调用控件的<code>setLayoutParams</code>  方法，重新设置控件参数</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewBorderActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_view_border);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv_code</span> <span class="operator">=</span> findViewById(R.id.tv_code);</span><br><span class="line">        <span class="comment">//调用getLayoutParams方法，获取布局参数</span></span><br><span class="line">        ViewGroup.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span>  tv_code.getLayoutParams();</span><br><span class="line">        <span class="comment">//setLayoutParams方法，来进行设置宽高，默认为px像素单位</span></span><br><span class="line">        params.width = Utils.dip2px(<span class="built_in">this</span>,<span class="number">300</span>);</span><br><span class="line">       <span class="comment">//更新布局参数</span></span><br><span class="line">        tv_code.setLayoutParams(params);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>计算dp值的dip2px方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="comment">//定义dp转换为px的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dip2px</span><span class="params">(Context context,<span class="type">float</span> dpValue)</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前手机像素的密度(1dp对应几个px)</span></span><br><span class="line">       <span class="type">float</span> <span class="variable">scale</span> <span class="operator">=</span>  context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="comment">//进行四舍五入取整</span></span><br><span class="line">       <span class="keyword">return</span>  (<span class="type">int</span>)(dpValue * scale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2视图对齐方式"><a href="#2-2视图对齐方式" class="headerlink" title="2.2视图对齐方式"></a>2.2视图对齐方式</h4><ul><li><p>采用layout_gravity属性,它指定当前视图作为子视图相对于父视图的对齐方式</p></li><li><p>采用gravity属性，它指定当前视图为父视图控制子视图的对齐方式</p></li><li><p>layout_gravity与gravtity的取值包括：left,top,right,bottom, 还可以使用竖线连接取值，例如”lef|top“表示即靠左有靠上</p><p>代码示例</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;300dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#ffff99&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一个布局背景为红色，他在上级视图中朝下对齐，它的下级视图靠右对齐   --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#FF0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#0000ff&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一个布局背景为红色，他在上级视图中朝上对齐，它的下级视图靠左对齐   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#FF0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;right&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#0000ff&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- android:orientation=&quot;horizontal&quot;&gt;       水平方向属性 --&gt;</span></span><br></pre></td></tr></table></figure><p>效果图</p><p>![](D:\Notebook Desk\Android\image\gravity01.png)</p><h4 id="2-3LinearLayout"><a href="#2-3LinearLayout" class="headerlink" title="2.3LinearLayout"></a>2.3LinearLayout</h4><p>1.线性布局内部的各视图有俩种排列方式</p><ul><li>orientation属性值horizontal时，内部视图在水平方向从左往右排列</li><li>orientation属性值为vertical时，内部视图在垂直方向从上往下排列</li></ul><p>如果不指定orientation属性，则LinearLayout默认水平方向排列</p><p>2.权重</p><p>![](D:\Notebook Desk\Android\image\线性布局02权重.png)</p><p>![](D:\Notebook Desk\Android\image\gravity02.png)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;横排第一个&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;横排第二个&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;竖排第一个&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;竖排第二个&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--整体竖排，局部横排--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--layout_weight权重，占比 三分之一 三分之二--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;横排第一个&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;横排第二个&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4RelativeLayout"><a href="#2-4RelativeLayout" class="headerlink" title="2.4RelativeLayout"></a>2.4RelativeLayout</h4><p>![](D:\Notebook Desk\Android\image\相对布局01.png)</p><p>代码示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">   &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;6dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我在中间&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我在水平中间&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerVertical</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我在垂直中间&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_parent_left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我在父容器的左边对齐&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_parent_right&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我在父容器的右边对齐&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_parent_top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我在父容器的顶部对齐&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_parent_bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我在父容器的底部对齐&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id设置在谁的旁边  alignTop 对齐方式 toLeftOf 对齐位置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_left_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toLeftOf</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignTop</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;中间左边&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_right_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignTop</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;中间右边&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_above_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignLeft</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;中间上边对齐&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_below_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignRight</span>=<span class="string">&quot;@+id/tv_center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;中间下边对齐&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;11sp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](D:\Notebook Desk\Android\image\relative.png)</p><h4 id="2-5GridLayout"><a href="#2-5GridLayout" class="headerlink" title="2.5GridLayout"></a>2.5GridLayout</h4><p>![](D:\Notebook Desk\Android\image\grid02.png)</p><p>示例代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">GridLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:columnCount</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:rowCount</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  设置俩行两列--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  text相当于textview的子类，故在textview中可通过gravity来控制text位置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:background</span>=<span class="string">&quot;#ffcccc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">&quot;浅红色&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:background</span>=<span class="string">&quot;#ffaa00&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">&quot;橙色&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:background</span>=<span class="string">&quot;#00ff00&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">&quot;绿色&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:background</span>=<span class="string">&quot;#660066&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">&quot;深紫色&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](D:\Notebook Desk\Android\image\grid01.png)</p><h4 id="2-6ScrollLayout"><a href="#2-6ScrollLayout" class="headerlink" title="2.6ScrollLayout"></a>2.6ScrollLayout</h4><ul><li><!--水平滚动--> <HorizontalScrollView /></li><li><!--垂直滚动-->  <ScrollView /></li><li>权重</li></ul><p>![](D:\Notebook Desk\Android\image\scroll01.png)</p><p>示例代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平滚动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HorizontalScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;300dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#aaffff&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;300dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#ffff00&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">HorizontalScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--垂直滚动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#aa0000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#00ff00&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#00ffee&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;#ccffbb&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Button控件"><a href="#3-Button控件" class="headerlink" title="3.Button控件"></a>3.Button控件</h3><h4 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h4><p>按钮控件Button由TextView派生而来，他们之间的区别有</p><ul><li><p>Butoon拥有默认的背景，而TextView默认无背景</p></li><li><p>Button的内部文本默认居中对齐，而TextView的内部文本默认靠左</p></li><li><p>Button会默认将英文字母转换为大写，而TextView保持原始的英文文字大小</p></li><li><p>button背景颜色修改，在我用的sdk11版本中，只在button中设置backgroud属性值无法完成修改，需要修改values目录文件下的theme.xml文件 修改parent属性</p><p>修改parent内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Theme.MaterialComponents.DayNight.Bridge</span><br></pre></td></tr></table></figure><p>（注意实在values目录文件下，二不是在night目录下）</p></li></ul><h4 id="3-2-新增属性"><a href="#3-2-新增属性" class="headerlink" title="3.2 新增属性"></a>3.2 新增属性</h4><p>与TextView相比，Button增加了俩个新属性</p><ul><li>textAllCaps属性,它指定是否将英文字母转换为大写。为true表示自动转换为大写，为false表示不做大写转换；</li><li>onClick属性，来接管用户点击动作，指定点击按钮时要触发的哪个方法；</li></ul><p>textAllCaps属性举例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;下面的按钮英文默认大写&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Hello World&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;下面的按钮英文保持原状&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Hello World&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-setOnClickListener-方法"><a href="#3-3-setOnClickListener-方法" class="headerlink" title="3.3 setOnClickListener()方法"></a>3.3 setOnClickListener()方法</h4><p>使用setOnClickListener()方法进行按钮事件监听</p><p>通过源码可得setOnClickListener（）内部含一个OnClickListener接口实现类</p><p>源码查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnClickListener</span><span class="params">(<span class="meta">@Nullable</span> OnClickListener l)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isClickable()) &#123;</span><br><span class="line">        setClickable(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getListenerInfo().mOnClickListener = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnClickListener</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Called when a view has been clicked.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v The view that was clicked.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>故实现onclick方法有三种</p><ul><li>法一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">...上述省略部分代码</span><br><span class="line">btn_click_single.setOnClickListener(<span class="keyword">new</span> <span class="title class_">MyOnClickListener</span>(tv_result));</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明static 防止内存泄露(安卓特性)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyOnClickListener</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView  tv_result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyOnClickListener</span><span class="params">(TextView tv_result)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.tv_result = tv_result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s 您点击了按钮 %s&quot;</span>, DateUtil.getNowTime(),((Button) v).getText()); </span><br><span class="line">            tv_result.setText(desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>法二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让类直接继承onClickListener接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ButtonClickActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新onClick方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v.getId() == R.id.btn_click_public)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s 您点击了按钮 %s&quot;</span>, DateUtil.getNowTime(),((Button) v).getText());  </span><br><span class="line">        tv_result.setText(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>法三</p><p>采用lambada语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn_long_click.setOnLongClickListener(v -&gt; &#123;</span><br><span class="line">    <span class="comment">//返回true代表由本身容器消耗此事件，false则表示传递给父容器</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s 您点击了按钮 %s&quot;</span>, DateUtil.getNowTime(),((Button) v).getText());  <span class="comment">//注意这里的((Button) view),改为((Button) v)</span></span><br><span class="line">    tv_result.setText(desc);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-setOnLongClickListener"><a href="#3-5-setOnLongClickListener" class="headerlink" title="3.5 setOnLongClickListener()"></a>3.5 setOnLongClickListener()</h4><ul><li><p>长按监听器，通过setOnLongClickListener()方法设置，</p><p>按钮按住超过500毫秒时，即可触发长按事件。</p></li><li><p>举例</p><p>java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义此事件时，需长按此按钮</span></span><br><span class="line"><span class="type">Button</span> <span class="variable">btn_long_click</span> <span class="operator">=</span>  findViewById(R.id.btn_long_click);</span><br><span class="line"></span><br><span class="line">btn_long_click.setOnLongClickListener(v -&gt; &#123;</span><br><span class="line">    <span class="comment">//返回true代表由本身容器消耗此事件，false则表示传递给父容器</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s 您点击了按钮 %s&quot;</span>, DateUtil.getNowTime(),((Button) v).getText());  <span class="comment">//注意这里的((Button) view),改为((Button) v)</span></span><br><span class="line">    tv_result.setText(desc);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_long_click&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;指定长按的点击监听&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4按钮颜色修改"><a href="#3-4按钮颜色修改" class="headerlink" title="3.4按钮颜色修改"></a>3.4按钮颜色修改</h4><p>1.修改values目录下的theme.xml文件</p><p>将原来的<code>&lt;style name=&quot;Theme.TestDemo&quot; parent=&quot;&quot;&gt;</code> parent值改为Theme.MaterialComponents.DayNight.Bridge</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Theme.TestDemo&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.MaterialComponents.DayNight.Bridge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3按钮禁用-disable"><a href="#3-3按钮禁用-disable" class="headerlink" title="3.3按钮禁用 disable"></a>3.3按钮禁用 disable</h4><p> <code>android:enabled=&quot;false&quot;</code> 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.btn_enable:</span><br><span class="line">            <span class="comment">//开启控件</span></span><br><span class="line">            btn_test.setEnabled(<span class="literal">true</span>);</span><br><span class="line">            btn_test.setTextColor(Color.BLACK);</span><br><span class="line">            tv_result.setText(btn_enable.getText());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.btn_disable:</span><br><span class="line">            <span class="comment">//关闭控件</span></span><br><span class="line">            btn_test.setEnabled(<span class="literal">false</span>);</span><br><span class="line">            btn_test.setTextColor(Color.GRAY);</span><br><span class="line">            tv_result.setText(btn_disable.getText());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.btn_test:</span><br><span class="line">            tv_result.setText(btn_test.getText());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_test&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;测试按钮&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;#888888&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-图片视图"><a href="#4-图片视图" class="headerlink" title="4.图片视图"></a>4.图片视图</h3><h4 id="4-1ImageView"><a href="#4-1ImageView" class="headerlink" title="4.1ImageView"></a>4.1ImageView</h4><p>图像视图常放在res&#x2F;drawable目录下，设置图像视图显示有俩种方式</p><ul><li>在xml中 通过 src 设置图片资源</li><li>在java中，调用setImageResource方法设置图片资源，参数格式为“R.drawable.不含扩展名的图片名称”</li></ul><h4 id="4-2ImageButton"><a href="#4-2ImageButton" class="headerlink" title="4.2ImageButton"></a>4.2ImageButton</h4><p>1.imagebutton常用于无法用文字显示的按钮图像</p><p>2.常见的按钮控件Button其实是文本按钮，因为按钮上面只能显示文字，不能显示图片，ImageButton才 是显示图片的图像按钮。虽然ImageButton号称图像按钮，但它并非继承Button，而是继承了 ImageView，所以凡是ImageView拥有的属性和方法，ImageButton统统拿了过来，区别在于 ImageButton有个按钮背景。</p><p>还有下列差异： </p><ul><li><p>Button既可显示文本也可显示图片（通过setBackgroundResource方法设置背景图片），而 ImageButton只能显示图片不能显示文本。</p></li><li><p>ImageButton上的图像可按比例缩放，而Button通过背景设置的图像会拉伸变形，因为背景图采取 fitXY方式，无法按比例缩放。 </p></li><li><p>Button只能靠背景显示一张图片，而ImageButton可分别在前景和背景显示图片，从而实现两张图 片叠加的效果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">match_parent;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">80dp;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">@drawable/sqrt;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:scaleType</span>=<span class="string">fitCenter;/</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3缩放机制"><a href="#4-3缩放机制" class="headerlink" title="4.3缩放机制"></a>4.3缩放机制</h4><p>![](D:\Notebook Desk\Android\image\image01.png)</p><h4 id="4-4文本图像同时显示"><a href="#4-4文本图像同时显示" class="headerlink" title="4.4文本图像同时显示"></a>4.4文本图像同时显示</h4><p>现在有了Button可在按钮上显示文字，又有ImageButton可在按钮上显示图像，照理说绝大多数场合都 够用了。然而现实项目中的需求往往捉摸不定，例如客户要求在按钮文字的左边加一个图标，这样按钮 内部既有文字又有图片，乍看之下Button和ImageButton都没法直接使用。若用LinearLayout对 ImageView和TextView组合布局，虽然可行，XML文件却变得冗长许多。 其实有个既简单又灵活的办法，要想在文字周围放置图片，使用按钮控件Button就能实现。原来Button 悄悄提供了几个与图标有关的属性，通过这些属性即可指定文字旁边的图标，以下是有关的图标属性说 明。</p><ul><li>drawableTop：指定文字上方的图片。</li><li>drawableBottom：指定文字下方的图片。 </li><li>drawableLeft：指定文字左边的图片。 </li><li>drawableRight：指定文字右边的图片。 </li><li>drawablePadding：指定图片与文字的间距。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">wrap_content;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">wrap_content;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawableLeft</span>=<span class="string">@drawable/ic_about;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawablePadding</span>=<span class="string">5dp;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">;图标在左;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">17sp</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-Activity"><a href="#5-Activity" class="headerlink" title="5.Activity"></a>5.Activity</h3><h4 id="5-1Activity启动与结束"><a href="#5-1Activity启动与结束" class="headerlink" title="5.1Activity启动与结束"></a>5.1Activity启动与结束</h4><p>》从当前页面跳转到新页面，代码如下</p><ul><li>startActivity(new Intent(源页面.this,目标页面。class));</li><li>finish();结束当前活动页面（执行这个方法时，也代表跳转到上一个页面）</li></ul><h4 id="5-2Activity生命周期"><a href="#5-2Activity生命周期" class="headerlink" title="5.2Activity生命周期"></a>5.2Activity生命周期</h4><p>![](D:\Notebook Desk\Android\image\activity生命周期.png)</p><p>onCreate方法所代表的创 建动作，正是一个活动最开始的行为，除了onCreate，活动还有其他几种生命周期行为，它们对应的方 法说明如下：</p><ul><li>onCreate：创建活动。此时会把页面布局加载进内存，进入了初始状态。</li><li>onStart：开启活动。此时会把活动页面显示在屏幕上，进入了就绪状态。</li><li>onResume：恢复活动。此时活动页面进入活跃状态，能够与用户正常交互，例如允许响应用户的 点击动作、允许用户输入文字等。</li><li>onPause：暂停活动。此时活动页面进入暂停状态（也就是退回就绪状态），无法与用户正常交 互。 </li><li>onStop：停止活动。此时活动页面将不在屏幕上显示。 </li><li>onDestroy：销毁活动。此时回收活动占用的系统资源，把页面从内存中清除掉。 </li><li>onRestart：重启活动。处于停止状态的活动，若想重新开启的话，无须经历</li><li>onCreate的重复创建 过程，而是走onRestart的重启过程。 </li><li>onNewIntent：重用已有的活动实例。</li></ul><p>![](D:\Notebook Desk\Android\image\Activity活动图.png)</p><h4 id="5-3Activity的启动模式"><a href="#5-3Activity的启动模式" class="headerlink" title="5.3Activity的启动模式"></a>5.3Activity的启动模式</h4><p>从android内核设计来说，系统给每个活动(activity)都分配了活动栈，栈里面存放着已经创建而未销毁的活动信息，因栈属于先进后出，后进先出的数据结构，故后面的活动总是先出栈，举例说明 入栈顺序 A–&gt;B–&gt;C ,出栈顺序C–&gt;B–&gt;A</p><p>图示例：</p><p>![](D:\Notebook Desk\Android\image\栈01.png)</p><p>注意：前述的属于标准模式，实际上我们在创建activity时可以自定义该activity的启动模式，通过修改启动模式来控制activity的出入栈行为。</p><h5 id="1-启动模式修改"><a href="#1-启动模式修改" class="headerlink" title="1.启动模式修改"></a>1.启动模式修改</h5><p>App提供了两种办法用于设置活动页面的启动模式</p><ul><li>法一：修改AndroidManifest.xml，在指定的activity节点添加属性<code>android:launchMode</code>，表示本活动以哪个启动模式运行。</li><li>法二：在代码中调用Intent对象的setFlags方法，表明后续打开的活动页面采用该启动标 志。</li></ul><p>1.在配置文件中指定启动模式</p><p>打开AndroidManifest.xml，给activity节点添加属性<strong>android:launchMode</strong>，属性值填入standard表示 采取标准模式，当然不添加属性的话默认就是标准模式。具体的activity节点配置内容示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.JumpFirstActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">&quot;standard&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>![](D:\Notebook Desk\Android\image\启动模式标志.png)</p><h6 id="1-1俩个活动之间相互跳转"><a href="#1-1俩个活动之间相互跳转" class="headerlink" title="1.1俩个活动之间相互跳转"></a>1.1俩个活动之间相互跳转</h6><p>主要特征：防止栈内活动重复</p><p>类似于栈内复用模式 signleTask</p><p>![](D:\Notebook Desk\Android\image\栈内复用.png)</p><p><strong>应用场景</strong> 程序主界面：我们肯定不希望主界面被创建多次，而且在主界面退出的时候退出整个 App 是最好的效 果。 </p><p><strong>耗费系统资源的Activity</strong>：对于那些及其耗费系统资源的 Activity，我们可以考虑将其设为 singleTask 模式，减少资源耗费。</p><p>假设活动A有个按钮，点击该按钮会跳到活动B；同时活动B也有个按钮，点击按钮会跳到活动A；从首页 打开活动A之后，就点击按钮在活动A与活动B之间轮流跳转。此时活动页面的跳转流程为：首页→活动 A→活动B→活动A→活动B→活动A→活动B→……多次跳转之后想回到首页，正常的话返回流程是这样 的：……→活动B→活动A→活动B→活动A→活动B→活动A→首页，注意每个箭头都代表按一次返回键， 可见要按下许多次返回键才能返回首页。其实在活动A和活动B之间本不应该重复返回，因为回来回去总 是这两个页面有什么意义呢？照理说每个活动返回一次足矣，同一个地方返回两次已经是多余的了，再 返回应当回到首页才是。也就是说，不管过去的时候怎么跳转，回来的时候应该按照这个流程：……→活 动B→活动A→首页，或者按照这个流程：……→活动A→活动B→首页，总之已经返回了的页面，决不再 返回第二次。</p><p> 对于不允许重复返回的情况，可以设置启动标志FLAG_ACTIVITY_CLEAR_TOP，即使活动栈里面存在待跳转的活动实例，也会重新创建该活动的实例，并清除原实例上方的所有实例，保证栈中最多只有该活动的唯一实例，从而避免了无谓的重复返回。于是活动A内部的跳转代码就改成了下面这般：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="comment">//创建意图对象</span></span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,JumpFirstActivity.class);</span><br><span class="line">    <span class="comment">//设置栈跳转规则，当栈内已经存在已有的活动实例时，再次加入相同属性的实例，则会清空所有的栈内容，并重新创建栈</span></span><br><span class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="comment">//创建意图对象</span></span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,JumpSecondActivity.class);</span><br><span class="line">    <span class="comment">//设置栈跳转规则</span></span><br><span class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2登录成功后不返回登录页面"><a href="#1-2登录成功后不返回登录页面" class="headerlink" title="1.2登录成功后不返回登录页面"></a>1.2登录成功后不返回登录页面</h6><p>在实际应用过程中，可以发现在登录页面，登录成功后，按手机返回键时，是不应该跳转到登录界面的。</p><p>对于回不去的登录页面情况，可以设置启动标志<code>FLAG_ACTIVITY_CLEAR_TASK</code>，该标志会清空当前活动 栈里的所有实例。</p><p>不过全部清空之后，意味着当前栈没法用了，必须另外找个活动栈才行，也就是同时设置启动标志<code>FLAG_ACTIVITY_NEW_TASK</code>，该标志用于开辟新任务的活动栈。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="comment">//创建意图对象，准备页面跳转</span></span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,LoginSuccessActivity.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在登录逻辑中，登录验证成功后，会跳转到登录成功页面</span></span><br><span class="line"><span class="comment">     * 点返回按钮，则不会返回到登录页面，会直接退出程序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//清空上一个栈，并创建下一个栈</span></span><br><span class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-五大重要启动模式"><a href="#2-五大重要启动模式" class="headerlink" title="2.五大重要启动模式"></a>2.五大重要启动模式</h5><p>启动模式不止这四种，具体看上述表格</p><h6 id="1-默认启动模式-standard"><a href="#1-默认启动模式-standard" class="headerlink" title="1.默认启动模式 standard"></a><strong>1.默认启动模式 standard</strong></h6><p>该模式可以被设定，不在 manifest 设定时候，Activity 的默认模式就是 standard。在该模式下，启动 的 Activity 会依照启动顺序被依次压入 Task 栈中：</p><p>![](D:\Notebook Desk\Android\image\默认启动模式.png)</p><h6 id="2-栈顶复用模式-singleTop"><a href="#2-栈顶复用模式-singleTop" class="headerlink" title="2.栈顶复用模式 singleTop"></a><strong>2.栈顶复用模式 singleTop</strong></h6><p>在该模式下，如果栈顶 Activity 为我们要新建的 Activity（目标Activity），那么就不会重复创建新的 Activity。</p><p>![](D:\Notebook Desk\Android\image\栈顶复用模式.png)</p><p><strong>应用场景</strong> </p><p>适合开启渠道多、多应用开启调用的 Activity，通过这种设置可以避免已经创建过的 Activity 被重复创建，多数通过动态设置使用。</p><h6 id="3-栈内复用模式-singleTask"><a href="#3-栈内复用模式-singleTask" class="headerlink" title="3.栈内复用模式 singleTask"></a><strong>3.栈内复用模式 singleTask</strong></h6><p>与 singleTop 模式相似，只不过 singleTop 模式是只是针对栈顶的元素，而 singleTask 模式下，如果 task 栈内存在目标 Activity 实例，则将 task 内的对应 Activity 实例之上的所有 Activity 弹出栈，并将对 应 Activity 置于栈顶，获得焦点</p><p>![](D:\Notebook Desk\Android\image\栈内复用模式.png)</p><p><strong>应用场景</strong></p><p> **程序主界面:**我们肯定不希望主界面被创建多次，而且在主界面退出的时候退出整个 App 是最好的效果。</p><p><strong>耗费系统资源的Activity：</strong>对于那些及其耗费系统资源的 Activity，我们可以考虑将其设为 singleTask 模式，减少资源耗费。</p><h6 id="4-全局唯一模式-singleInstance"><a href="#4-全局唯一模式-singleInstance" class="headerlink" title="4.全局唯一模式 singleInstance"></a><strong>4.全局唯一模式 singleInstance</strong></h6><p>在该模式下，我们会为目标 Activity 创建一个新的 Task 栈，将目标 Activity 放入新的 Task，并让目标 Activity获得焦点。新的 Task 有且只有这一个 Activity 实例。 如果已经创建过目标 Activity 实例，则不会创建新的 Task，而是将以前创建过的 Activity 唤醒。</p><p>![](D:\Notebook Desk\Android\image\全局唯一模式.png)</p><p>看一个示例，Activity3 设置为singleInstance，Activity1 和 Activity2 默认（standard），下图程序流程 中，黄色的代表 Background 的Task，蓝色的代表 Foreground 的Task。返回时会先把 Foreground 的 Task 中的 Activity 弹出，直到 Task 销毁，然后才将 Background的 Task 唤到前台，所以最后将 Activity3 销毁之后，会直接退出应用。</p><p>![](D:\Notebook Desk\Android\image\全局唯一02.png)</p><h6 id="5-动态设置启动模式"><a href="#5-动态设置启动模式" class="headerlink" title="5.动态设置启动模式"></a><strong>5.动态设置启动模式</strong></h6><p>在上述所有情况，都是我们在Manifest中通过 launchMode 属性设置的，这个被称为静态设置，动态设置是通过 Java 代码设置的。</p><p> 通过 Intent 动态设置 Activity启动模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intent.setFlags();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空上一个栈，并创建下一个栈</span></span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br></pre></td></tr></table></figure><p>如果同时存在静态和动态设置，则动态设置的优先级更高</p><p>动态设置Activity启动模式的几种方法</p><p><strong>FLAG_ACTIVITY_NEW_TASK</strong></p><p>对应的flag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intent.FLAG_ACTIVITY_NEW_TASK</span><br></pre></td></tr></table></figure><p>此flag类似于singleInstance相似，即在给目标 Activity 设立此 Flag 后，会根据目标 Activity 的 affinity 进 行匹配，如果已经存在与其affinity 相同的 task，则将目标 Activity 压入此 Task。反之没有的话，则新 建一个 task，新建的 task 的 affinity 值与目标 Activity 相同，然后将目标 Activity 压入此栈。</p><p>但它与 singleInstance 有不同的点，两点需要注意的地方：</p><ul><li>新的 Task 没有说只能存放一个目标 Activity，只是说决定是否新建一个 Task，而 singleInstance 模式下新的 Task 只能放置一个目标 Activity。 </li><li>在同一应用下，如果 Activity 都是默认的 affinity，那么此 Flag 无效，而 singleInstance 默认情况 也会创建新的 Task。</li></ul><p><strong>FLAG_ACTIVITY_SINGLE_TOP</strong></p><p>flag如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntent.FLAG_ACTIVITY_SINGLE_TOP</span><br></pre></td></tr></table></figure><p>与静态设置的singleTop效果相同</p><p><strong>FLAG_ACTIVITY_CLEAR_TOP</strong></p><p>flag如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intent.FLAG_ACTIVITY_CLEAR_TOP</span><br></pre></td></tr></table></figure><p>当设置此flag时，目标activity会检查task中是否存在该实例，如果没有则添加入栈，如果有，则将位于task中对应的activity其上方的所有activity弹出栈，以下有俩种情况：</p><ul><li><p>如果同时设置Flag_ACTIVITY_CLEAR_TOP,则直接使用栈内的对应的activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);</span><br></pre></td></tr></table></figure></li><li><p>没有没有设置，则将栈内对应的activity销毁并重新创建</p></li></ul><p>按位或运算符 运算规则：0|0&#x3D;0 0|1&#x3D;1 1|0&#x3D;1 1|1&#x3D;1 总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即 0000 0011| 0000 0101 &#x3D; 0000 0111，因此，3|5的值得7</p><h5 id="5-4在活动之间传递信息"><a href="#5-4在活动之间传递信息" class="headerlink" title="5.4在活动之间传递信息"></a>5.4在活动之间传递信息</h5><h6 id="1-显示Intent和隐式Intent"><a href="#1-显示Intent和隐式Intent" class="headerlink" title="1.显示Intent和隐式Intent"></a>1.显示Intent和隐式Intent</h6><p>Intent中文名为意图</p><p>Intent时个组件之间信息沟通的桥梁。既能在actiivty之间沟通，又能在activity与service之间沟通，有也能在activity与Broadcst之间沟通，它主要完成下列部分工作：</p><ul><li>1.标志本此请求从哪里来，到哪里去，要怎么走</li><li>2.发起方携带本次通信的数据内容，接收方从收到的意图中解析数据</li><li>3.发起方若想判断接收方的处理结果，意图就要负责让接收方传会应答的数据内容</li></ul><p>​Intent组成元素的列表说明</p><table><thead><tr><th>元素名称</th><th>设置方法</th><th>说明与用途</th></tr></thead><tbody><tr><td>Component</td><td>setComponent</td><td>组件，它指定意图的来源与目标</td></tr><tr><td>Action</td><td>setAction</td><td>动作，它指定意图的动作行为</td></tr><tr><td>Data</td><td>setData</td><td>即Uri，它指定动作要操纵的数据路径</td></tr><tr><td>Category</td><td>addCategory</td><td>类别，它指定意图的操作类别</td></tr><tr><td>Type</td><td>setType</td><td>数据类型，它指定消息的数据类型</td></tr><tr><td>Extras</td><td>putExtras</td><td>扩展信息，它指定装载的包裹信息</td></tr><tr><td>Flags</td><td>setFlags</td><td>标志位，它指定活动的启动标志</td></tr></tbody></table><p><strong>1.显示Intent, 直接指定来源活动与目标活动，属于精准匹配</strong></p><p>在构建一个意图对象时，需要指定两个参数，第一个参数表示跳转的来源页面，即“来源Activity.this”； 第二个参数表示待跳转的页面，即“目标Activity.class”。具体的意图构建方式有如下3种：</p><p>(1) 在Intent的构造函数中指定，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, ActNextActivity.class); <span class="comment">// 创建一个目标确定的意图</span></span><br></pre></td></tr></table></figure><p>(2) 调用意图对象的setClass方法指定，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(); <span class="comment">// 创建一个新意图 </span></span><br><span class="line">intent.setClass(<span class="built_in">this</span>, ActNextActivity.class); <span class="comment">// 设置意图要跳转的目标活动</span></span><br></pre></td></tr></table></figure><p>（3） 调用意图对象的setComponent方法指定，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(); <span class="comment">// 创建一个新意图</span></span><br><span class="line"><span class="type">ComponentName</span> <span class="variable">component</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(<span class="built_in">this</span>, ActNextActivity.class); <span class="comment">// 创建包含目标活动在内的组件名称对象 </span></span><br><span class="line">intent.setComponent(component); <span class="comment">// 设置意图携带的组件信息</span></span><br></pre></td></tr></table></figure><p><strong>2．隐式Intent，没有明确指定要跳转的目标活动，只给出一个动作字符串让系统自动匹配，属于模糊 匹配</strong></p><p>通常App不希望向外部暴露活动名称，只给出一个事先定义好的标记串，这样大家约定俗成、按图索骥 就好，隐式Intent便起到了标记过滤作用。这个动作名称标记串，可以是自己定义的动作，也可以是已 有的系统动作。</p><p>　常见系统动作的取值说明</p><table><thead><tr><th align="center">类别</th><th align="center">常量名</th><th align="center">常量值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">系统动作</td><td align="center">ACTION_MAIN</td><td align="center">android.intent.action.MAIN</td><td align="center">App启动时的入口</td></tr><tr><td align="center">系统动作</td><td align="center">ACTION_VIEW</td><td align="center">android.intent.action.VIEW</td><td align="center">向用户显示数据</td></tr><tr><td align="center">系统动作</td><td align="center">ACTION_SEND</td><td align="center">android.intent.action.SEND</td><td align="center">分享内容</td></tr><tr><td align="center">系统动作</td><td align="center">ACTION_CALL</td><td align="center">android.intent.action.CALL</td><td align="center">直接拨号</td></tr><tr><td align="center">系统动作</td><td align="center">ACTION_DIAL</td><td align="center">android.intent.action.DIAL</td><td align="center">准备拨号</td></tr><tr><td align="center">系统动作</td><td align="center">ACTION_SENDTO</td><td align="center">android.intent.action.SENDTO</td><td align="center">发送短信</td></tr><tr><td align="center">系统动作</td><td align="center">ACTION_ANSWER</td><td align="center">android.intent.action.ANSWER</td><td align="center">接听电话</td></tr></tbody></table><p>动作名称既可以通过setAction方法指定，也可以通过构造函数Intent(String action)直接生成意图对象。 </p><p>当然，由于动作是模糊匹配，因此有时需要更详细的路径，比如仅知道某人住在天通苑小区，并不能直 接找到他家，还得说明他住在天通苑的哪一期、哪栋楼、哪一层、哪一个单元。</p><p>Uri和Category便是这样的路径与门类信息，Uri数据可通过构造函数Intent(String action, Uri uri)在生成对象时一起指定，也可 通过setData方法指定（setData这个名字有歧义，实际相当于setUri）；</p><p>Category可通过addCategory 方法指定，之所以用add而不用set方法，是因为一个意图允许设置多个Category，方便一起过滤。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">phoneNo</span> <span class="operator">=</span> <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(); <span class="comment">// 创建一个新意图</span></span><br><span class="line">intent.setAction(Intent.ACTION_DIAL); <span class="comment">// 设置意图动作为准备拨号</span></span><br><span class="line"><span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;tel:&quot;</span> + phoneNo); <span class="comment">// 声明一个拨号的Uri</span></span><br><span class="line">intent.setData(uri); <span class="comment">// 设置意图前往的路径</span></span><br><span class="line">startActivity(intent); <span class="comment">// 启动意图通往的活动页面</span></span><br></pre></td></tr></table></figure><p>隐式Intent还用到了<strong>过滤器</strong>的概念，把不符合匹配条件的过滤掉，剩下符合条件的按照优先顺序调用。</p><p> 譬如创建一个App模块，AndroidManifest.xml里的<code>intent-filter</code>就是配置文件中的过滤器。像最常见的 首页活动MainAcitivity，它的activity节点下面便设置了action和category的过滤条件。其中 android.intent.action.MAIN表示App的入口动作，而android.intent.category.LAUNCHER表示在桌面 上显示App图标，配置样例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-向下一个Actiicty发送数据"><a href="#2-向下一个Actiicty发送数据" class="headerlink" title="2.向下一个Actiicty发送数据"></a>2.向下一个Actiicty发送数据</h6><p>简要说明：</p><p>如果想将数据传递给下一个acticity,则需要使用Intent中的多种<strong>putExtra</strong>方法传递各种类型参数</p><p>但只调用putExtra方法显然不好管理，不能进行数据的统一管理</p><p>故android引用了<strong>Bundle</strong>的概念。</p><p>Bundle内部用于存放消息的数据结构是Map映射</p><p>具体说明：</p><p>Intent对象的setData方法只指定到达目标的路径，并非本次通信所携带的参数信息，真 正的参数信息存放在Extras中。Intent重载了很多种putExtra方法传递各种类型的参数，包括整型、双 精度型、字符串等基本数据类型，甚至Serializable这样的序列化结构。只是调用putExtra方法显然不好管理，像送快递一样大小包裹随便扔，不但找起来不方便，丢了也难以知道。</p><p>所以Android引入了 Bundle概念，可以把Bundle理解为超市的寄包柜或快递收件柜，大小包裹由Bundle统一存取，方便又 安全。 Bundle内部用于存放消息的数据结构是Map映射，既可添加或删除元素，还可判断元素是否存在。开发 者若要把Bundle数据全部打包好，只需调用一次意图对象的putExtras方法；若要把Bundle数据全部取 出来，也只需调用一次意图对象的getExtras方法。Bundle对象操作各类型数据的读写方法说明见表。</p><table><thead><tr><th>数据类型</th><th>读方法</th><th>写方法</th></tr></thead><tbody><tr><td>整型数</td><td><code>getInt</code></td><td><code>putInt</code></td></tr><tr><td>浮点数</td><td><code>getFloat</code></td><td><code>putFloat</code></td></tr><tr><td>双精度数</td><td><code>getDouble</code></td><td><code>putDouble</code></td></tr><tr><td>布尔值</td><td><code>getBoolean</code></td><td><code>putBoolean</code></td></tr><tr><td>字符串</td><td><code>getString</code></td><td><code>putString</code></td></tr><tr><td>字符串数组</td><td><code>getStringArray</code></td><td><code>putStringArray</code></td></tr><tr><td>字符串列表</td><td><code>getStringArrayList</code></td><td><code>putStringArrayList</code></td></tr><tr><td>可序列化结构</td><td><code>getSerializable</code></td><td><code>putSerializable</code></td></tr></tbody></table><p>举例说明：首先在上一个活动中使用bundle封装好数据，将bundle传递给Intent意图对象，在调用startActivity方法跳转到意图指定的目标acitvity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个意图对象，准备跳到指定的活动页面</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, ActReceiveActivity.class);</span><br><span class="line"><span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>(); <span class="comment">// 创建一个新包裹</span></span><br><span class="line"><span class="comment">// 往包裹存入名为request_time的字符串</span></span><br><span class="line">bundle.putString(<span class="string">&quot;request_time&quot;</span>, DateUtil.getNowTime());</span><br><span class="line"><span class="comment">// 往包裹存入名为request_content的字符串</span></span><br><span class="line">bundle.putString(<span class="string">&quot;request_content&quot;</span>, tv_send.getText().toString());</span><br><span class="line">intent.putExtras(bundle); <span class="comment">// 把快递包裹塞给意图</span></span><br><span class="line">startActivity(intent); <span class="comment">// 跳转到意图指定的活动页面</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">安卓入门</summary>
    
    
    
    <category term="后端框架" scheme="https://inglingq.gitee.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Map_Mybaits</title>
    <link href="https://inglingq.gitee.io/2023/11/19/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/map_Mybatis/"/>
    <id>https://inglingq.gitee.io/2023/11/19/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/map_Mybatis/</id>
    <published>2023-11-19T03:16:10.000Z</published>
    <updated>2023-11-19T03:28:53.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map:"></a>Map:</h3><p>常用方法：get(),put()</p><p>在mybatis中常用于多表联合查询</p><h4 id="1-前后端协调"><a href="#1-前后端协调" class="headerlink" title="1.前后端协调"></a>1.前后端协调</h4><p>由于map集合返回的是键值对，一个键 对应一个值，非常适用于json数据格式，可用于前后端协调</p><p>在springboot中以单表book举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @MapKey(&quot;id&quot;)  //定义一个键 针对于这一注解不添加，mapper检查后会报红,运行时不会报错</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectById</span><span class="params">(Integer id)</span>;  <span class="comment">//接口方法</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">       select  * from tbl_book where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line"><span class="comment">//map数据发送测试</span></span><br><span class="line">        Map&lt;String,Object&gt; map = bookService.selectById(id);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> map == <span class="literal">null</span> ? Code.GET_ERR : Code.GET_OK;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> map == <span class="literal">null</span> ? <span class="string">&quot;数据查询失败&quot;</span> : <span class="string">&quot;数据查询成功&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,map,msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">经postman 测试后(http:<span class="comment">//localhost/books/2)：返回数据格式为json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">20041</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Spring 5核心原理与30个类手写实践&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;十年沉淀之作，手写Spring精华思想&quot;</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;计算机理论&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;数据查询成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Map在mybatis中的属性特征</summary>
    
    
    
    <category term="后端框架" scheme="https://inglingq.gitee.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程</title>
    <link href="https://inglingq.gitee.io/2023/11/19/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>https://inglingq.gitee.io/2023/11/19/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</id>
    <published>2023-11-19T03:14:10.000Z</published>
    <updated>2023-12-22T13:31:55.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mybatis逆向工程"><a href="#Mybatis逆向工程" class="headerlink" title="Mybatis逆向工程"></a>Mybatis逆向工程</h3><p>(个人认为这是在csdn搜索到的最简单方法）</p><h4 id="1-生成器在springboot中的实现方法："><a href="#1-生成器在springboot中的实现方法：" class="headerlink" title="1.生成器在springboot中的实现方法："></a>1.生成器在springboot中的实现方法：</h4><p><strong>1.首先引入所需要的依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis与spring的连接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql连接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- generator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.在pom.xml文件下引入逆向工程的工具</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.引入generatorConfig.xml文件</strong></p><p>注意：此方法需要在resouce文件夹下创建 generatorConfig.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释，改成false发现生成的代码注释为英文 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mysql数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，把JDBC DECIMAL 和NUMERIC类型解析为Integer，为true时</span></span><br><span class="line"><span class="comment">        把JDBC DECIMAL 和NUMERIC类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       <span class="comment">&lt;!-- targetProject：生成POJO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.httpstest.domain&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.httpstest.mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：mapper接口生成的的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.httpstest.mapper&quot;</span>   <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 指定数据表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;food&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;form&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;product&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 有些表的字段需要指定java类型</span></span><br><span class="line"><span class="comment">    &lt;table schema=&quot;DB2ADMIN&quot; tableName=&quot;ALLTYPES&quot; domainObjectName=&quot;Customer&quot; &gt;</span></span><br><span class="line"><span class="comment">      &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="comment">      &lt;generatedKey column=&quot;ID&quot; sqlStatement=&quot;DB2&quot; identity=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="comment">      &lt;columnOverride column=&quot;DATE_FIELD&quot; property=&quot;startDate&quot; /&gt;</span></span><br><span class="line"><span class="comment">      &lt;ignoreColumn column=&quot;FRED&quot; /&gt;</span></span><br><span class="line"><span class="comment">      &lt;columnOverride column=&quot;LONG_VARCHAR_FIELD&quot; jdbcType=&quot;VARCHAR&quot; /&gt;</span></span><br><span class="line"><span class="comment">    &lt;/table&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后在maven的命令中执行generator</p><p><img src="/img/static%E6%9C%BA%E5%88%B6.png"> </p><p>根目录为&#x2F;img</p><p>生成图：domain,mapper文件目录都由生成器自动创建</p><h4 id="2-mapper-xml文件解读"><a href="#2-mapper-xml文件解读" class="headerlink" title="2.mapper.xml文件解读"></a>2.mapper.xml文件解读</h4><p>2.1在生成的xml文件中，主要生成了增删改的功能，增改的动态sql以及静态sql都已生成除此之外还包含动态查询，但多表查询语句需要自己写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  定义的sql片段</span></span><br><span class="line"><span class="comment">  &lt;sql id=&quot;Base_Column_List&quot;&gt;</span></span><br><span class="line"><span class="comment">      id, type, name, description</span></span><br><span class="line"><span class="comment">  &lt;/sql&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  下面的</span></span><br><span class="line"><span class="comment">  select</span></span><br><span class="line"><span class="comment">  &lt;include refid=&quot;Base_Column_List&quot; /&gt;          这行用于引用其他地方定义的SQL片段   根据上方的sql片段可将本行类似于    id, type, name, description</span></span><br><span class="line"><span class="comment">  from tbl_book</span></span><br><span class="line"><span class="comment">  where id = #&#123;id,jdbcType=INTEGER&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 不使用sql片段：可化为：</span></span><br><span class="line"><span class="comment">  select</span></span><br><span class="line"><span class="comment">  id, type, name, description</span></span><br><span class="line"><span class="comment">  from tbl_book</span></span><br><span class="line"><span class="comment">  where id = #&#123;id,jdbcType=INTEGER&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">    from tbl_book</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这段MyBatis XML映射文件的代码中，<code>&lt;include refid=&quot;Base_Column_List&quot; /&gt;</code> 是一个MyBatis的特性，用于引用其他地方定义的SQL片段。这个特性的目的是为了复用SQL片段，减少代码冗余。</p><p>在你提供的代码中，<code>&lt;include refid=&quot;Base_Column_List&quot; /&gt;</code> 表示引用一个ID为 “Base_Column_List” 的SQL片段。这个片段可能在同一个XML文件中定义，也可能在其他XML文件中定义。在你的情况下，它可能是在同一个XML文件中定义的，而且可能类似于下面的形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">     id, type, name, description</span><br><span class="line"> <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，”Base_Column_List” 是一个包含列名的SQL片段。当你使用 <code>&lt;include refid=&quot;Base_Column_List&quot; /&gt;</code> 时，它会在SQL语句中插入这个SQL片段的内容，就好像你直接写了 <code>column1, column2, column3</code> 一样。</p><p>这样的做法有助于维护和管理，因为如果你的表结构发生变化，你只需要在定义 “Base_Column_List” 的地方进行修改，而不需要在每个用到这些列的地方都修改。这符合Don’t Repeat Yourself (DRY)的编程原则。</p><p>_parameter 参数</p><p>在MyBatis中，<code>_parameter</code> 是一个隐含的参数，代表传递给 SQL 语句的参数对象。在这个例子中，<code>_parameter != null</code> 的测试条件用于检查传递给该 SQL 语句的参数对象是否为非空。</p><p>具体来说，这段代码是一个动态 SQL 查询语句，其中使用了 <code>&lt;if&gt;</code> 元素来根据条件动态生成 SQL 片段。在这里，<code>&lt;if test=&quot;_parameter != null&quot;&gt;</code> 的目的是检查传递给查询语句的参数对象是否为非空，如果非空，就包含一个名为 “Example_Where_Clause” 的 SQL 片段。</p><p>这是一个常见的 MyBatis 使用模式，其中你可以通过传递一个带有条件的对象来动态构建查询条件。如果传递的参数对象不为 null，则生成相应的查询条件，否则，忽略该部分条件。</p><p>例如，如果传递了一个 <code>TblBookExample</code> 对象，并且该对象的属性设置了一些查询条件，那么 “Example_Where_Clause” 可能包含与该条件相关的 SQL 片段。</p><p>总的来说，<code>_parameter</code> 在这里代表传递给 SQL 语句的参数对象，而 <code>&lt;if test=&quot;_parameter != null&quot;&gt;</code> 用于检查是否有传递参数，并根据参数的存在与否来动态生成相应的 SQL 片段。</p>]]></content>
    
    
    <summary type="html">逆向工程在idea中的快速创建方法</summary>
    
    
    
    <category term="后端框架" scheme="https://inglingq.gitee.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://inglingq.gitee.io/2023/10/29/test/"/>
    <id>https://inglingq.gitee.io/2023/10/29/test/</id>
    <published>2023-10-29T08:02:53.000Z</published>
    <updated>2023-10-29T08:02:53.589Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>ssm整合</title>
    <link href="https://inglingq.gitee.io/2023/10/29/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/ssm%E6%95%B4%E5%90%88/"/>
    <id>https://inglingq.gitee.io/2023/10/29/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/ssm%E6%95%B4%E5%90%88/</id>
    <published>2023-10-29T07:14:10.000Z</published>
    <updated>2023-11-19T03:24:41.599Z</updated>
    
    <content type="html"><![CDATA[<p>1.泛型错误<br>在使用getall得到整个表信息时，接口及实现类的方法都要添加泛型</p><p>2：jdbc.pqroperties在springmvc加载，已解决<br>方法：<br>修改前：@PropertySource(“jdbc.properties”)，</p><p>修改后@PropertySource(“classpath:jdbc.properties”)<br>加入了 classpath</p>]]></content>
    
    
    <summary type="html">ssm整合的一点小细节</summary>
    
    
    
    <category term="后端框架" scheme="https://inglingq.gitee.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot整合ssm</title>
    <link href="https://inglingq.gitee.io/2023/10/29/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/springboot%E6%95%B4%E5%90%88ssm/"/>
    <id>https://inglingq.gitee.io/2023/10/29/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/springboot%E6%95%B4%E5%90%88ssm/</id>
    <published>2023-10-29T06:58:41.000Z</published>
    <updated>2023-11-19T03:10:57.172Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-整合配置问题"><a href="#1-整合配置问题" class="headerlink" title="1.整合配置问题"></a>1.整合配置问题</h4><p>因springBoot简化了ssm中的配置方法，故可去除相关的spring-springmvc-springmvcsupport-servletcontainIntconfig-mybatisconfig-jdbconfig等相关配置.<br>springboot内置tomcat插件，故不需要配置servlet，运行启动类即可启动。</p><p>测试时，可采用junit单元测试</p><h4 id="2-必要的异常处理方案仍需添加"><a href="#2-必要的异常处理方案仍需添加" class="headerlink" title="2.必要的异常处理方案仍需添加."></a>2.必要的异常处理方案仍需添加.</h4><p>2.1在基于Mybatis的基础上来配置相关数据库连接信息：springboot极大的简化了此过程，现在仅需在yaml文件中添加数据库的语法格式即可连接成功（ps:yaml文件配置是最常用的方法，也有其他方法）.</p><p>2.2在初始化配置时，dao层的接口无法被扫描到，故需添加相应的注解使其成为bean,使之被扫描</p><p>2.3在springboot中resource资源目录下的static文件夹下用来处理静态页面（但针对于前后端分离开发，此方法几乎不使用）.</p><p>2.4在mybatis中针对于mapper中的xml文件扫描</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于配置mapper映射文件，yaml文件格式</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span> <span class="comment"># 配置XML文件扫描路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.demo.dao</span> <span class="comment"># 配置实体类别名扫描路径</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Springboot整合ssm思路（基于ssm整合基础）</summary>
    
    
    
    <category term="后端框架" scheme="https://inglingq.gitee.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>gitee-butterfly</title>
    <link href="https://inglingq.gitee.io/2023/10/29/hexo%E9%85%8D%E7%BD%AE%E9%9B%86/gitee-butterfly/"/>
    <id>https://inglingq.gitee.io/2023/10/29/hexo%E9%85%8D%E7%BD%AE%E9%9B%86/gitee-butterfly/</id>
    <published>2023-10-29T06:55:02.000Z</published>
    <updated>2024-02-05T04:13:15.883Z</updated>
    
    <content type="html"><![CDATA[<p>脱离<code>hexo</code>渲染，部署静态页面，在更新上传时，<code>gitee</code>平台下无法更新，本地部署更新成功</p><p>需要登录<code>gitee</code>手动去page更新，和<code>github</code>不同</p>]]></content>
    
    
    <summary type="html">上传静态页面至gitee的bug</summary>
    
    
    
    <category term="hexo配置集" scheme="https://inglingq.gitee.io/categories/hexo%E9%85%8D%E7%BD%AE%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>散点</title>
    <link href="https://inglingq.gitee.io/2023/10/05/hexo%E9%85%8D%E7%BD%AE%E9%9B%86/%E6%95%A3%E7%82%B9/"/>
    <id>https://inglingq.gitee.io/2023/10/05/hexo%E9%85%8D%E7%BD%AE%E9%9B%86/%E6%95%A3%E7%82%B9/</id>
    <published>2023-10-05T13:43:14.000Z</published>
    <updated>2023-11-12T13:06:50.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在上传时使用http协议失败，暂未解决 但采用ssh方式部署成功</p><p>source中的post文件被移除，在更改主题时<br>blog&#x2F;source中的about被移除了</p><p><a href="https://codebyzach.github.io/pace/">https://codebyzach.github.io/pace/</a>   进度条动画网站<br>763行 进度条动画修改</p><p>&#x2F;&#x2F;background-color: $light-blue<br>1.引入外部css可修改底部等属性<br>2.在引入外部css 文件修改网站背景时，出遗留bug,在buterfly配置中需要给 641：background属性赋值</p><h2 id="一个传送点"><a href="#一个传送点" class="headerlink" title="一个传送点"></a>一个传送点</h2><p>在设置首页title打字效果描述时，需要 sub:<br>        - Even 2d otakus want to save the world<br>而不是 sub: Even 2d otakus want to save the world<br>注意 - 符号</p><p>导航栏闪烁问题尚未解决</p><p>成功！！！！<br>受不了了<br>！！！！<br><code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></p><p>10月五号晚 不小心删除配置文件，利用远古blog-demo复制粘贴复刻成功</p>]]></content>
    
    
    <summary type="html">hexo初始化时的bug</summary>
    
    
    
    <category term="hexo配置集" scheme="https://inglingq.gitee.io/categories/hexo%E9%85%8D%E7%BD%AE%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Demo test</title>
    <link href="https://inglingq.gitee.io/2023/10/02/demo02/"/>
    <id>https://inglingq.gitee.io/2023/10/02/demo02/</id>
    <published>2023-10-02T02:53:44.000Z</published>
    <updated>2024-05-20T13:27:20.577Z</updated>
    
    
    <summary type="html">mode</summary>
    
    
    
    <category term="随笔" scheme="https://inglingq.gitee.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://inglingq.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
